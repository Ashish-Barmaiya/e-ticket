generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// HOST BASIC INFO MODEL  ///
model Hosts {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  phone                   String                   @unique
  password                String
  profileImage            String?
  refreshToken            String?
  accountStatus           String                   @default("pending")
  lastLogin               DateTime?
  verificationStatus      Boolean                  @default(false)
  role                    String                   @default("Individual")
  preferredLanguage       String?
  timezone                String?
  rating                  Float                    @default(0.0)
  numberOfEventsHosted    Int                      @default(0)
  supportContactInfo      String?
  preferredCommunication  String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  businessInformation     BusinessInformation?
  bankingInformation      BankingInformation?
  venues                  VenueInformation[]
  ticketCustomizations    TicketCustomization[]
  hostAnalytics           HostAnalytics?
  hostPromotions          HostPromotions?
  notificationPreferences NotificationPreferences?
  teamMembers             HostTeamManagement[]
  events                  Event[]
}

/// HOST BUSINESS INFO MODEL ///
model BusinessInformation {
  id                   String    @id @default(uuid())
  hostId               String    @unique
  companyName          String
  businessRegistration String
  taxDetails           String
  businessType         String
  websiteUrl           String?
  socialMediaLinks     Json?
  businessDescription  String?
  businessLogo         String?
  kycStatus            Boolean   @default(false)
  complianceExpiration DateTime?
  host                 Hosts     @relation(fields: [hostId], references: [id])
}

/// HOST BANKING INFO MODEL ///
model BankingInformation {
  id                     String  @id @default(uuid())
  hostId                 String  @unique
  bankAccountDetails     String
  revenueAgreement       String
  preferredPaymentMethod String
  paymentFrequency       String
  paymentThreshold       Float
  taxFilingStatus        Boolean @default(false)
  taxDocuments           Json?
  host                   Hosts   @relation(fields: [hostId], references: [id])
}

/// VENUE MODEL ///
model VenueInformation {
  id                   String                @id @default(uuid())
  hostId               String
  name                 String
  address              String
  city                 String?
  lattitude            Float?
  longitude            Float?
  seatingCapacity      Int
  seatingCategories    String?
  seatingLayout        String
  venueType            String
  facilities           Json?
  eventTypesSupported  Json?
  venuePolicies        String?
  venuePhotos          Json?
  pricingInformation   Json?
  availabilityCalendar Json?
  venueAccessibility   Json?
  venueSetupServices   Json?
  host                 Hosts                 @relation(fields: [hostId], references: [id])
  ticketCustomization  TicketCustomization[]
  event                Event[]
}

/// TICKET CUSTOMIZATION MODEL ///
model TicketCustomization {
  id                String           @id @default(uuid())
  hostId            String
  venueId           String
  ticketTemplate    Json
  customTicketRules Json
  ticketPriceTiers  Json
  host              Hosts            @relation(fields: [hostId], references: [id])
  venueInformation  VenueInformation @relation(fields: [venueId], references: [id])
}

/// HOST ANALYTICS MODEL ///
model HostAnalytics {
  id                    String @id @default(uuid())
  hostId                String @unique
  totalTicketsSold      Int    @default(0)
  totalRevenueGenerated Float  @default(0.0)
  attendanceRate        Float  @default(0.0)
  refundRequests        Int    @default(0)
  host                  Hosts  @relation(fields: [hostId], references: [id])
}

/// HOST PROMOTION MODEL ///
model HostPromotions {
  id                     String @id @default(uuid())
  hostId                 String @unique
  discountCodes          Json?
  referralProgramDetails Json?
  adSpend                Float  @default(0.0)
  host                   Hosts  @relation(fields: [hostId], references: [id])
}

/// HOST NOTIFICATION PREFERENCE MODEL ///
model NotificationPreferences {
  id                 String  @id @default(uuid())
  hostId             String  @unique
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)
  alertPreferences   Json?
  securityAlerts     Boolean @default(true)
  host               Hosts   @relation(fields: [hostId], references: [id])
}

/// HOST TEAM MANAGEMENT MODEL ///
model HostTeamManagement {
  id           String @id @default(uuid())
  hostId       String
  teamMemberId String
  role         String
  permissions  Json
  host         Hosts  @relation(fields: [hostId], references: [id])
}

// USER MODEL
model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  emailVerification  Boolean  @default(false)
  password           String
  fullName           String
  phone              String   @unique
  phoneVerification  Boolean  @default(false)
  dateOfBirth        String?
  eKyc               Boolean  @default(false)
  aadhaarNumber      String?  @unique
  aadhaarPhoneNumber String?  @unique
  uniqueUserIdentity String?  @unique
  profilePicture     String?
  gender             String?
  refreshToken       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  addresses           UserAddress[]
  tickets             Ticket[]
  TicketCancellations TicketCancellations[]
  ResaleListing       ResaleListing[]

  // Relation for tickets bought via resale
  resalePurchases ResaleTransaction[] @relation(name: "buyerRelation")

  // Relation for tickets sold via resale
  resaleSales       ResaleTransaction[] @relation(name: "sellerRelation")
  ResaleTransaction ResaleTransaction[]
}

// USER ADDRESS MODEL
model UserAddress {
  id           Int     @id @default(autoincrement())
  userId       String
  areaPincode  Int
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  country      String
  user         User    @relation(fields: [userId], references: [id])
}

// TICKET MODEL
model Ticket {
  id                String               @id @default(uuid())
  ticketNumber      Int                  @default(autoincrement())
  userId            String
  eventId           Int
  price             Float
  seatNumber        String?
  userEkycRequired  Boolean              @default(false)
  qrCode            String?
  createdAt         DateTime             @default(now())
  status            String               @default("Active") // Active, Canceled, Listed, Resold
  resoldAt          DateTime?
  canceledAt        DateTime?
  cancellation      TicketCancellations?
  user              User                 @relation(fields: [userId], references: [id])
  event             Event                @relation(fields: [eventId], references: [id])
  ResaleListing     ResaleListing?
  ResaleTransaction ResaleTransaction?

  @@index([userId])
  @@index([eventId])
}

// RESALELISTING MODEL
model ResaleListing {
  id           String   @id @default(uuid())
  ticketId     String   @unique
  ticketNumber Int // Ticket number of the original ticket
  eventId      Int
  sellerId     String   @db.VarChar(255) // Who is selling
  resalePrice  Float
  seatNumber   String?
  listedAt     DateTime @default(now())
  status       String   @default("listed") // listed, sold, canceled, expired, unlisted
  ticket       Ticket   @relation(fields: [ticketId], references: [id])
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [sellerId], references: [id])
}

// RESALETRASACTION MODEL //
model ResaleTransaction {
  id          String   @id @default(uuid())
  ticketId    String   @unique // Original ticket id
  eventId     Int
  buyerId     String // Who is buying
  sellerId    String // Who is selling
  resalePrice Float
  seatNumber  String?
  purchasedAt DateTime @default(now())
  status      String   @default("purchased") // purchased, canceled, expired
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])
  buyer       User     @relation(fields: [buyerId], references: [id], name: "buyerRelation")
  seller      User     @relation(fields: [sellerId], references: [id], name: "sellerRelation")
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

// TICKETCANCELLATION MODEL
model TicketCancellations {
  id             String   @id @default(uuid())
  ticketId       String   @unique
  userId         String
  eventId        Int
  seatsCancelled String
  canceledAt     DateTime @default(now())
  reason         String?
  refund         Float?
  ticket         Ticket   @relation(fields: [ticketId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  event          Event    @relation(fields: [eventId], references: [id])

  @@index([canceledAt])
}

/// EVENT MODEL ///
model Event {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String?
  posterImage         String?
  bannerImage         String?
  artist              String?
  date                DateTime
  startTime           DateTime
  endTime             DateTime?
  hostId              String // References the Hosts table
  venueId             String // References the VenueInformation table
  ticketsAvailable    Int
  seatsAvailable      String[] // Newly added
  price               Float // Ticket price per person
  status              String                @default("Scheduled") // e.g., Scheduled, Canceled, Expired
  userEkycRequired    Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  host                Hosts                 @relation(fields: [hostId], references: [id])
  venueInformation    VenueInformation      @relation(fields: [venueId], references: [id])
  ticket              Ticket[] // Relation to tickets sold for this event
  TicketCancellations TicketCancellations[]
  ResaleListing       ResaleListing[]
  ResaleTransaction   ResaleTransaction[]
}
